'''
This program makes the rnn input sequences generated by convertData.py
uniform length.
'''

import random
import numpy as np

# function to remove outlier sequences
def removeOutliers(data, labels, avg_length, target_length):

	numToRemove = 0
	for i, seq in enumerate(labels):

		length = len(seq)
		coding_length = seq.rfind('2') - seq.find('2')
		# remove seqs much larger or smaller than avg and
		# remove seq if coding regio is larger than target length
		if length > 3*avg_length or length < 0.1*avg_length or coding_length > target_length:
			#removeSeq(data, labels, i)
			data[i] = None
			labels[i] = None
			numToRemove += 1

	for _ in range(numToRemove):
		data.remove(None)
		labels.remove(None)

	return data, labels

'''
def removeSeq(data, labels, i):
	data[i] = None
	labels[i] = None
	data.remove(None)
	labels.remove(None)
'''

# function to generate and prepend/append nucleotides
def modData(data, labels, target_length, vocab):

	for i,seq in enumerate(data):
		#print i
		seq = seq[:-2] # ignore space and newline at end
		seq_length = len(seq)
		charsToGen = target_length - seq_length

		if charsToGen >= 0:
			numPrepended = int(random.random()*charsToGen)
			numAppended = charsToGen - numPrepended
			#print 'numPrepended = %d	numAppended = %d' % (numPrepended,numAppended)
	
			# generate chars to prepend
			prepend = ''
			for _ in range(numPrepended):
				prepend += vocab[ int(random.random()*4) ]
	
			# generate chars to append
			append = ''
			for _ in range(numAppended):
				append += vocab[ int(random.random()*4) ]

			# add chars to seq
			newseq = prepend + seq + append + ' \n'
			data[i] = newseq
			
			# update labels
			#print 'before labels[%d] = ' % i
			#print labels[i]
			#print 'numPrepended = %d	numAppended = %d' % (numPrepended,numAppended)
			#break
			labels[i] = '1'*numPrepended + labels[i][:-2] + '1'*numAppended + ' \n'
			#print 'after labels[%d] = ' % i
			#print labels[i]
			#break

		elif charsToGen < 0:
			charsToRemove = abs(charsToGen)
			# find number of preceding and succeding noncoding nucleotides
			prefix_length = labels[i].find('2')
			suffix_length = labels[i].rfind('1') - labels[i].rfind('2')

			#if charsToRemove > prefix_length + suffix_length:
			#	removeSeq(data, labels, i)				

			# num of chars to remove from prefix
			suffixToRemove = int(random.random()*charsToRemove)
			if suffixToRemove > suffix_length: suffixToRemove = suffix_length
			prefixToRemove = charsToRemove - suffixToRemove

			# update data and labels
			data[i] = data[i][prefixToRemove:seq_length - suffixToRemove] + ' \n'
			labels[i] = labels[i][prefixToRemove:seq_length - suffixToRemove] + ' \n'

	return data, labels


def writeData(handle, data):
	f = open(handle, 'w')
	for seq in data: f.write(seq)
	f.close()


random.seed(123)

# input and label dirs
hmmTrainData_dir = '../data/training/hmm/'
manTrainData_dir = '../data/training/manual/'

# open converted input files
f_hmmInput_var = open(hmmTrainData_dir + 'input_varying.txt')
f_hmmLabels_var = open(hmmTrainData_dir + 'labels_varying.txt')
f_manInput_var = open(manTrainData_dir + 'input_varying.txt')
f_manLabels_var = open(manTrainData_dir + 'labels_varying.txt')

# read converted seq data into lists
hmmData = list(f_hmmInput_var)
hmmLabels = list(f_hmmLabels_var)
manData = list(f_manInput_var)
manLabels = list(f_manLabels_var)

# close files
f_hmmInput_var.close()
f_hmmLabels_var.close()
f_manInput_var.close()
f_manLabels_var.close()

'''
# find length of longest seq
hmmData_max = max(hmmData, key=len)
manData_max = max(manData, key=len)
max_length = len(max( [hmmData_max, manData_max], key=len ))
print max_length
'''

# find the average seq length
hmmData_lengths = [len(i) for i in hmmData]
manData_lengths = [len(i) for i in manData]
avg_length = int(np.mean(hmmData_lengths + manData_lengths))
# define target sequence length
target_length = int(1.5*avg_length)
print 'The target sequence length is %d' % target_length

# remove outlier sequences
print 'Removing outliers ...'
[hmmData, hmmLabels] = removeOutliers(hmmData, hmmLabels, avg_length, target_length)
[manData, manLabels] = removeOutliers(manData, manLabels, avg_length, target_length)

# create vocab for char generation
vocab = ['A','C','G','T']

# check length of each seq and prepend/append artificially
# generated noncoding chars
print 'Modifying sequences ...'
[hmmData, hmmLabels] = modData(hmmData, hmmLabels, target_length, vocab)
[manData, manLabels] = modData(manData, manLabels, target_length, vocab)

# write new equal length seqs to txt files for rnn input
print 'Writing files ...'
writeData(hmmTrainData_dir + 'input.txt', hmmData)
writeData(hmmTrainData_dir + 'labels.txt', hmmLabels)
writeData(manTrainData_dir + 'input.txt', manData)
writeData(manTrainData_dir + 'labels.txt', manLabels)

