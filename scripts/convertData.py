'''
This script converts the hmm data generated by the geneMark.hmm 
software into the sequence format required by the rnn
'''

import os
import math
import random
from Bio import SeqIO

seed = 123 # starting point for random num gen

genbank_dir = '../data/genbank/'
hmmdata_dir = '../data/geneMark/hmm/'
rnnTrain_dir = '../data/training/'
rnnTrainInput_hmm = rnnTrain_dir + 'hmm/input_varying.txt'
rnnTrainLabels_hmm = rnnTrain_dir + 'hmm/labels_varying.txt'
rnnTrainInput_man = rnnTrain_dir + 'manual/input_varying.txt'
rnnTrainLabels_man = rnnTrain_dir + 'manual/labels_varying.txt'

# set random seed
random.seed(seed)

# open rnn training input file and label file to write
f_hmmtrain = open(rnnTrainInput_hmm, 'w')
f_hmmlabels = open(rnnTrainLabels_hmm, 'w')
f_mantrain = open(rnnTrainInput_man, 'w')
f_manlabels = open(rnnTrainLabels_man, 'w')

# write hmm data to rnn format
for filename in os.listdir(hmmdata_dir):
	
	# get genbank seq data matching filename (must be stored locally)
	idx = filename.index('.')
	genbank_file = filename[0:idx] + '.fasta'
	genbank_record = SeqIO.read(genbank_dir + 'complete/' + genbank_file, 'fasta')

	fdata = open(hmmdata_dir + filename)
	for i,line in enumerate(fdata):
		
		if i == 11:
			prevLine = line
			noncoding_start = 0

		elif i > 11:

			prevGene = prevLine.split()
			try:
				prevStart = int(prevGene[2])
			except:
				prevStart = int(prevGene[2][1:])
			if prevStart < noncoding_start: prevStart = noncoding_start

			try:
				prevEnd = int(prevGene[3])
			except:
				prevEnd = int(prevGene[3][1:])

			gene = line.split()
			if gene:

				try:
					start = int(gene[2])
				except:
					start = int(gene[2][1:])
				try:
					end = int(gene[3])
				except:
					end = int(gene[3][1:])

				# prevent overlapping - let end prediction of prev gene win
				if start < prevEnd: start = prevEnd + 1

				noncoding_end = prevEnd + int(math.floor(random.random()*(start - prevEnd)))

				'''
				if i == 15:
					print genbank_record.seq[noncoding_start:noncoding_end]
					print '1'*(prevStart-noncoding_start) + '2'*(prevEnd-prevStart) + '1'*(noncoding_end-prevEnd)
					print noncoding_end - noncoding_start
					print (prevStart-noncoding_start)+(prevEnd-prevStart)+(noncoding_end-prevEnd)
					print('noncoding_start = %d	prevStart = %d	prevEnd = %d	noncoding_end = %d' % 
						(noncoding_start, prevStart, prevEnd, noncoding_end))
					break
				'''

				f_hmmtrain.write(str(genbank_record.seq[noncoding_start:noncoding_end]) + ' \n')
				f_hmmlabels.write('1'*(prevStart-noncoding_start) + '2'*(prevEnd-prevStart) + 
					'1'*(noncoding_end-prevEnd) + ' \n')
				prevLine = line
				noncoding_start = noncoding_end

			else:
				noncoding_end = len(genbank_record.seq)
				f_hmmtrain.write(str(genbank_record.seq[noncoding_start:noncoding_end]) + ' \n')
				f_hmmlabels.write('1'*(prevStart-noncoding_start) + '2'*(prevEnd-prevStart) + 
					'1'*(noncoding_end-prevEnd) + ' \n')
				break

	fdata.close()
	
# write manually annotated data to rnn format
for filename in os.listdir(genbank_dir + 'features/'):

	# get complete record for adding noncoding characters
	idx = filename.index('.')
	complete_file = filename[0:idx] + '.fasta'
	complete_record = SeqIO.read(genbank_dir + 'complete/' + complete_file, 'fasta')

	prec_str = 'location='
	prec_str_comp = 'mplement('
	sep_str = '..'
	follow_str = ']'
	follow_str_comp = ')]'
	prec_length = len(prec_str)
	#prec_comp_length = len(prec_str)
	sep_length = len(sep_str)
	#follow_str = len(follow_str)

	# count number of genes or records in features
	for last, _ in enumerate(SeqIO.parse(genbank_dir + 'features/' + filename, 'fasta')): pass

	for i, record in enumerate(SeqIO.parse(genbank_dir + 'features/' + filename, 'fasta')):
		# START HERE -- PULL OUT START/END LOCATION FROM DESCRIPTION STRING, THEN FOLLOW
		# 				ABOVE LOOP TO WRITE DATA TO FILES

		# get start and end locations for record
		# get indexes for preceding, separating, and following strings
		if filename == 'mtb_h37rv.txt' and i == 3375:
			record.description = '[location=3593369..3593852]'
 		if filename == 'ecoli_o157h7_str_sakai.txt' and i == 3851:
			record.description = '[location=complement(3773333..3774431)]'
		if i == 0:
			prevRecord = record
			noncoding_start = 0
		else:
			prev_idx0 = prevRecord.description.find(prec_str_comp)
			if prev_idx0 == -1: prev_idx0 = prevRecord.description.find(prec_str)
			prev_idx1 = prevRecord.description.find(sep_str)
			if prec_str_comp in prevRecord.description:
				prev_idx2 = prevRecord.description.rfind(follow_str_comp)
			else:
				prev_idx2 = prevRecord.description.rfind(follow_str)

			try:
				prevStart = int(prevRecord.description[prev_idx0 + prec_length:prev_idx1])
			except:
				prevStart = int(prevRecord.description[prev_idx0 + prec_length + 1:prev_idx1])
			try:
				prevEnd = int(prevRecord.description[prev_idx1 + sep_length:prev_idx2])
			except:
				prevEnd = int(prevRecord.description[prev_idx1 + sep_length + 1:prev_idx2])

			idx0 = record.description.find(prec_str_comp)
			if idx0 == -1: idx0 = record.description.find(prec_str)
			idx1 = record.description.find(sep_str)
			if prec_str_comp in record.description:
				idx2 = record.description.rfind(follow_str_comp)
			else:
				idx2 = record.description.rfind(follow_str)

			try:
				start = int(record.description[idx0 + prec_length:idx1])
			except:
				start = int(record.description[idx0 + prec_length + 1:idx1])
			try:
				end = int(record.description[idx1 + sep_length:idx2])
			except:
				end = int(record.description[idx1 + sep_length + 1:idx2])

			noncoding_end = prevEnd + int(math.floor(random.random()*(start - prevEnd)))
			if i == last: noncoding_end = len(complete_record.seq)

			f_mantrain.write(str(complete_record.seq[noncoding_start:noncoding_end]) + ' \n')
			f_manlabels.write('1'*(prevStart-noncoding_start) + '2'*(prevEnd-prevStart) + 
				'1'*(noncoding_end-prevEnd) + ' \n')

			prevRecord = record
			noncoding_start = noncoding_end

f_hmmtrain.close()
f_hmmlabels.close()
f_mantrain.close()
f_manlabels.close()
